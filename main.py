import telebot
import config
import random

from telebot import types

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)      #–°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤. –û–Ω–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞.
    item1 = types.KeyboardButton("üåü –ù–∞—á–Ω–µ–º üåü")

    markup.add(item1)
    bot.send_message(message.chat.id,
                     f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n–Ø - <b>{bot.get_me().first_name}</b>. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É‚ùì",
                     parse_mode='html', reply_markup=markup)
#parse_mode='html', —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ reply_markup=markup –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞.

# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã(–ø–æ—Å–ª–µ–¥–Ω–∏–π)
quiz = {
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?": ["–ú–∞—Ä—Å–µ–ª—å", "–õ–∏–æ–Ω", "–ù–∏—Ü—Ü–∞", "–ü–∞—Ä–∏–∂", "–ü–∞—Ä–∏–∂"],
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?": ["–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–í–µ–Ω–µ—Ä–∞", "–°–∞—Ç—É—Ä–Ω", "–Æ–ø–∏—Ç–µ—Ä"],
    "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ'?": ["–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤", "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
                                                             "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤", "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"],
    "–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º 'Fe'?": ["–ñ–µ–ª–µ–∑–æ", "–§—Ç–æ—Ä", "–§–æ—Å—Ñ–æ—Ä", "–§—Ä–∞–Ω—Ü–∏–π", "–ñ–µ–ª–µ–∑–æ"],
    "–ö–∞–∫–æ–π –≥–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã?": ["1941", "1942", "1943", "1944", "1941"],
    "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –Ø–ø–æ–Ω–∏–∏?": ["–û—Å–∞–∫–∞", "–ö–∏–æ—Ç–æ", "–°–∞–ø–ø–æ—Ä–æ", "–¢–æ–∫–∏–æ", "–¢–æ–∫–∏–æ"],
    "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –≥–æ–¥–∞ 2023 –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é?": ["–ó–º–µ—è", "–ö—Ä—ã—Å–∞", "–ö–æ–∑–∞", "–¢–∏–≥—Ä", "–¢–∏–≥—Ä"],
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?": ["–ú–∏—Å—Å–∏—Å–∏–ø–∏", "–ù–∏–ª", "–ê–º–∞–∑–æ–Ω–∫–∞", "–í–æ–ª–≥–∞", "–ê–º–∞–∑–æ–Ω–∫–∞"],
    "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ –ü–µ—Ä–≤—É—é –º–∏—Ä–æ–≤—É—é –≤–æ–π–Ω—É?": ["–£–±–∏–π—Å—Ç–≤–æ –§—Ä–∞–Ω—Ü–∞ –§–µ—Ä–¥–∏–Ω–∞–Ω–¥–∞", "–í–∑—Ä—ã–≤ –õ—É—Å–∏—Ç–∞–Ω–∏–∏",
                                                   "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ë—Ä–µ—Å—Ç-–õ–∏—Ç–æ–≤—Å–∫–æ–≥–æ –º–∏—Ä–∞",
                                                   "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –í–µ—Ä—Å–∞–ª—å—Å–∫–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞", "–£–±–∏–π—Å—Ç–≤–æ –§—Ä–∞–Ω—Ü–∞ –§–µ—Ä–¥–∏–Ω–∞–Ω–¥–∞"],
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∏–ª—ã –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è?": ["–í–æ–ª—å—Ç", "–í–∞—Ç—Ç", "–†–∏—Ö—Ç–µ—Ä", "–§–∞—Ä–∞–¥", "–†–∏—Ö—Ç–µ—Ä"]
}

current_question = None  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
user_answers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
answered_question_count = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

@bot.message_handler(func=lambda message: message.text == 'üåü –ù–∞—á–Ω–µ–º üåü' and message.chat.type == 'private' or message.text == 'üåü –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ üåü')
def start_quiz(message):
    global user_answers, answered_question_count
    user_answers = {}
    answered_question_count = 0
    ask_question(message)

def ask_question(message):
    global current_question   #—Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    available_questions = list(set(quiz.keys()) - set(user_answers.keys()))    #–¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–æ–ø—Ä–æ—Å:–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏

    if answered_question_count == 5:  # –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 5
        show_results(message)
        return

    if not available_questions:
        show_results(message)
        return

    current_question = random.choice(available_questions)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answers = quiz[current_question][:4]
    random.shuffle(answers)
    for answer in answers:
        markup.add(types.KeyboardButton(answer))

    bot.send_message(message.chat.id, f"{current_question}?", reply_markup=markup)  #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

@bot.message_handler(func=lambda message: message.text in quiz[current_question] if current_question else False)  #—Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (message.text in quiz[current_question]). –ï—Å–ª–∏ current_question –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (—Ä–∞–≤–µ–Ω None), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è False
def handle_answer(message):
    global current_question, answered_question_count
    if current_question is not None:
        user_answers[current_question] = message.text
        answered_question_count += 1
        ask_question(message)     #–∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@bot.message_handler(commands=['end_quiz'])
def end_quiz(message):
    show_results(message)

def show_results(message):
    correct_answers = 0
    wrong_answers = []

    for question, user_answer in user_answers.items():
        correct_answer = quiz[question][-1]     #–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if user_answer == correct_answer:
            correct_answers += 1
        else:
            wrong_answers.append(f"–í–æ–ø—Ä–æ—Å: {question}\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n")

    answered_questions = len(user_answers)     #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≤–µ—Ç–æ–≤
    result_message = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {answered_questions}\n\n"
    if wrong_answers:
        result_message += "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n\n" + "\n".join(wrong_answers)
    else:
        result_message += "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã!"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üåü –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ üåü")
    markup.add(item1)
    bot.send_message(message.chat.id, result_message, reply_markup=markup)

# –∑–∞–ø—É—Å–∫
bot.polling(none_stop=True)
